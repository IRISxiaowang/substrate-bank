
//! Autogenerated weights for pallet_auction
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-08-14, STEPS: `20`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Xiaos-MBP.hub`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/xy-chain
// benchmark
// pallet
// --extrinsic
// *
// --pallet
// pallet_auction
// --output
// ./pallets/pallet-auction/src/weights.rs
// --steps=20
// --repeat=20
// --template=weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_auction.
pub trait WeightInfo {
	fn create_auction() -> Weight;
	fn bid() -> Weight;
	fn cancel_auction() -> Weight;
}

/// Weights for pallet_auction using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Nft::Nfts` (r:1 w:1)
	/// Proof: `Nft::Nfts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::Owners` (r:1 w:0)
	/// Proof: `Nft::Owners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Auction::NextAuctionId` (r:1 w:1)
	/// Proof: `Auction::NextAuctionId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Auction::AuctionsExpiryBlock` (r:1 w:1)
	/// Proof: `Auction::AuctionsExpiryBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Bank::TreasuryAccount` (r:1 w:0)
	/// Proof: `Bank::TreasuryAccount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Bank::Accounts` (r:2 w:2)
	/// Proof: `Bank::Accounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Auction::Auctions` (r:0 w:1)
	/// Proof: `Auction::Auctions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_auction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `515`
		//  Estimated: `6455`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(37_000_000, 6455)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `Auction::Auctions` (r:1 w:1)
	/// Proof: `Auction::Auctions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Bank::Accounts` (r:2 w:2)
	/// Proof: `Bank::Accounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Auction::AuctionsExpiryBlock` (r:1 w:1)
	/// Proof: `Auction::AuctionsExpiryBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn bid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `397`
		//  Estimated: `6337`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(27_000_000, 6337)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Auction::Auctions` (r:1 w:1)
	/// Proof: `Auction::Auctions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::Nfts` (r:1 w:1)
	/// Proof: `Nft::Nfts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::Owners` (r:1 w:0)
	/// Proof: `Nft::Owners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Bank::Accounts` (r:2 w:2)
	/// Proof: `Bank::Accounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_auction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `777`
		//  Estimated: `6717`
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(35_000_000, 6717)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `Nft::Nfts` (r:1 w:1)
	/// Proof: `Nft::Nfts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::Owners` (r:1 w:0)
	/// Proof: `Nft::Owners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Auction::NextAuctionId` (r:1 w:1)
	/// Proof: `Auction::NextAuctionId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Auction::AuctionsExpiryBlock` (r:1 w:1)
	/// Proof: `Auction::AuctionsExpiryBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Bank::TreasuryAccount` (r:1 w:0)
	/// Proof: `Bank::TreasuryAccount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Bank::Accounts` (r:2 w:2)
	/// Proof: `Bank::Accounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Auction::Auctions` (r:0 w:1)
	/// Proof: `Auction::Auctions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_auction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `515`
		//  Estimated: `6455`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(37_000_000, 6455)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `Auction::Auctions` (r:1 w:1)
	/// Proof: `Auction::Auctions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Bank::Accounts` (r:2 w:2)
	/// Proof: `Bank::Accounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Auction::AuctionsExpiryBlock` (r:1 w:1)
	/// Proof: `Auction::AuctionsExpiryBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn bid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `397`
		//  Estimated: `6337`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(27_000_000, 6337)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Auction::Auctions` (r:1 w:1)
	/// Proof: `Auction::Auctions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::Nfts` (r:1 w:1)
	/// Proof: `Nft::Nfts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::Owners` (r:1 w:0)
	/// Proof: `Nft::Owners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Bank::Accounts` (r:2 w:2)
	/// Proof: `Bank::Accounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_auction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `777`
		//  Estimated: `6717`
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(35_000_000, 6717)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
}
