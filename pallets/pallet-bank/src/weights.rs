
//! Autogenerated weights for pallet_bank
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-22, STEPS: `1`, REPEAT: `50`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Xiaos-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/node-template
// benchmark
// pallet
// --pallet
// pallet-bank
// --extrinsic
// *
// --output
// ./pallets/pallet-bank/src/weights.rs
// --steps=1
// --repeat=50
// --template=./weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_bank.
pub trait WeightInfo {
	fn deposit() -> Weight;
}

/// Weights for pallet_bank using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Roles::AccountRoles` (r:2 w:0)
	/// Proof: `Roles::AccountRoles` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `Bank::Accounts` (r:1 w:1)
	/// Proof: `Bank::Accounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Bank::TotalIssuance` (r:1 w:1)
	/// Proof: `Bank::TotalIssuance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `473`
		//  Estimated: `6038`
		// Minimum execution time: 23_000_000 picoseconds.
		Weight::from_parts(24_000_000, 6038)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `Roles::AccountRoles` (r:2 w:0)
	/// Proof: `Roles::AccountRoles` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `Bank::Accounts` (r:1 w:1)
	/// Proof: `Bank::Accounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Bank::TotalIssuance` (r:1 w:1)
	/// Proof: `Bank::TotalIssuance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `473`
		//  Estimated: `6038`
		// Minimum execution time: 23_000_000 picoseconds.
		Weight::from_parts(24_000_000, 6038)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
