
//! Autogenerated weights for pallet_governance
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-02-19, STEPS: `20`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Xiaos-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/xy-chain
// benchmark
// pallet
// --extrinsic
// *
// --pallet
// pallet_governance
// --output
// ./pallets/pallet-governance/src/weights.rs
// --steps=20
// --repeat=20
// --template=weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_governance.
pub trait WeightInfo {
	fn initiate_proposal() -> Weight;
	fn vote() -> Weight;
	fn council_rotate_authorities() -> Weight;
	fn force_rotate_authorities() -> Weight;
}

/// Weights for pallet_governance using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Governance::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Governance::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::NextProposalId` (r:1 w:1)
	/// Proof: `Governance::NextProposalId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::Expiry` (r:1 w:1)
	/// Proof: `Governance::Expiry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::Votes` (r:1 w:1)
	/// Proof: `Governance::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::Proposals` (r:0 w:1)
	/// Proof: `Governance::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn initiate_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `106`
		//  Estimated: `3571`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(25_000_000, 3571)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Governance::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Governance::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::Proposals` (r:1 w:0)
	/// Proof: `Governance::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::Votes` (r:1 w:1)
	/// Proof: `Governance::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::ProposalsToResolve` (r:1 w:1)
	/// Proof: `Governance::ProposalsToResolve` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `276`
		//  Estimated: `3741`
		// Minimum execution time: 21_000_000 picoseconds.
		Weight::from_parts(22_000_000, 3741)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Governance::Expiry` (r:2 w:2)
	/// Proof: `Governance::Expiry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::CurrentAuthorities` (r:0 w:1)
	/// Proof: `Governance::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn council_rotate_authorities() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `161`
		//  Estimated: `6101`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(19_000_000, 6101)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Governance::Expiry` (r:2 w:2)
	/// Proof: `Governance::Expiry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::CurrentAuthorities` (r:0 w:1)
	/// Proof: `Governance::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn force_rotate_authorities() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `161`
		//  Estimated: `6101`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(20_000_000, 6101)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `Governance::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Governance::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::NextProposalId` (r:1 w:1)
	/// Proof: `Governance::NextProposalId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::Expiry` (r:1 w:1)
	/// Proof: `Governance::Expiry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::Votes` (r:1 w:1)
	/// Proof: `Governance::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::Proposals` (r:0 w:1)
	/// Proof: `Governance::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn initiate_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `106`
		//  Estimated: `3571`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(25_000_000, 3571)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Governance::CurrentAuthorities` (r:1 w:0)
	/// Proof: `Governance::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::Proposals` (r:1 w:0)
	/// Proof: `Governance::Proposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::Votes` (r:1 w:1)
	/// Proof: `Governance::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::ProposalsToResolve` (r:1 w:1)
	/// Proof: `Governance::ProposalsToResolve` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `276`
		//  Estimated: `3741`
		// Minimum execution time: 21_000_000 picoseconds.
		Weight::from_parts(22_000_000, 3741)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Governance::Expiry` (r:2 w:2)
	/// Proof: `Governance::Expiry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::CurrentAuthorities` (r:0 w:1)
	/// Proof: `Governance::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn council_rotate_authorities() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `161`
		//  Estimated: `6101`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(19_000_000, 6101)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Governance::Expiry` (r:2 w:2)
	/// Proof: `Governance::Expiry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Governance::CurrentAuthorities` (r:0 w:1)
	/// Proof: `Governance::CurrentAuthorities` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn force_rotate_authorities() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `161`
		//  Estimated: `6101`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(20_000_000, 6101)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
}
