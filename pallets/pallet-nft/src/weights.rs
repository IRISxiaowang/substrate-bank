
//! Autogenerated weights for pallet_nft
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-04-15, STEPS: `20`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Xiaos-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/xy-chain
// benchmark
// pallet
// --extrinsic
// *
// --pallet
// pallet_nft
// --output
// ./pallets/pallet-nft/src/weights.rs
// --steps=20
// --repeat=20
// --template=weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_nft.
pub trait WeightInfo {
	fn request_mint() -> Weight;
	fn burned() -> Weight;
	fn transfer() -> Weight;
	fn approve_nft() -> Weight;
	fn force_burn() -> Weight;
	fn create_pod() -> Weight;
	fn receive_pod() -> Weight;
	fn cancel_pod() -> Weight;
}

/// Weights for pallet_nft using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Roles::AccountRoles` (r:1 w:0)
	/// Proof: `Roles::AccountRoles` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `Nft::NextNftId` (r:1 w:1)
	/// Proof: `Nft::NextNftId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::PendingNft` (r:0 w:1)
	/// Proof: `Nft::PendingNft` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn request_mint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `329`
		//  Estimated: `3514`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(17_000_000, 3514)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Nft::Nfts` (r:1 w:1)
	/// Proof: `Nft::Nfts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::Owners` (r:1 w:1)
	/// Proof: `Nft::Owners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn burned() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `205`
		//  Estimated: `3670`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_000_000, 3670)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Roles::AccountRoles` (r:1 w:0)
	/// Proof: `Roles::AccountRoles` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Nfts` (r:1 w:0)
	/// Proof: `Nft::Nfts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::Owners` (r:1 w:1)
	/// Proof: `Nft::Owners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `458`
		//  Estimated: `3923`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(24_000_000, 3923)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Roles::AccountRoles` (r:1 w:0)
	/// Proof: `Roles::AccountRoles` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `Nft::PendingNft` (r:1 w:1)
	/// Proof: `Nft::PendingNft` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::Owners` (r:0 w:1)
	/// Proof: `Nft::Owners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::Nfts` (r:0 w:1)
	/// Proof: `Nft::Nfts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn approve_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `418`
		//  Estimated: `3883`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(21_000_000, 3883)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Nft::Owners` (r:0 w:1)
	/// Proof: `Nft::Owners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::Nfts` (r:0 w:1)
	/// Proof: `Nft::Nfts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn force_burn() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(8_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Roles::AccountRoles` (r:2 w:0)
	/// Proof: `Roles::AccountRoles` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Nfts` (r:1 w:1)
	/// Proof: `Nft::Nfts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::Owners` (r:1 w:0)
	/// Proof: `Nft::Owners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Bank::TreasuryAccount` (r:1 w:0)
	/// Proof: `Bank::TreasuryAccount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::NextPodId` (r:1 w:1)
	/// Proof: `Nft::NextPodId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::UnlockNft` (r:1 w:1)
	/// Proof: `Nft::UnlockNft` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Bank::Accounts` (r:2 w:2)
	/// Proof: `Bank::Accounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::PendingPodNfts` (r:0 w:1)
	/// Proof: `Nft::PendingPodNfts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_pod() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1006`
		//  Estimated: `6946`
		// Minimum execution time: 50_000_000 picoseconds.
		Weight::from_parts(51_000_000, 6946)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `Roles::AccountRoles` (r:2 w:0)
	/// Proof: `Roles::AccountRoles` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `Nft::PendingPodNfts` (r:1 w:1)
	/// Proof: `Nft::PendingPodNfts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::Owners` (r:1 w:1)
	/// Proof: `Nft::Owners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::Nfts` (r:1 w:0)
	/// Proof: `Nft::Nfts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Bank::Accounts` (r:2 w:2)
	/// Proof: `Bank::Accounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn receive_pod() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1103`
		//  Estimated: `7043`
		// Minimum execution time: 49_000_000 picoseconds.
		Weight::from_parts(51_000_000, 7043)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Roles::AccountRoles` (r:1 w:0)
	/// Proof: `Roles::AccountRoles` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `Nft::PendingPodNfts` (r:1 w:1)
	/// Proof: `Nft::PendingPodNfts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::Nfts` (r:1 w:1)
	/// Proof: `Nft::Nfts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::Owners` (r:1 w:0)
	/// Proof: `Nft::Owners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_pod() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `709`
		//  Estimated: `4174`
		// Minimum execution time: 29_000_000 picoseconds.
		Weight::from_parts(30_000_000, 4174)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `Roles::AccountRoles` (r:1 w:0)
	/// Proof: `Roles::AccountRoles` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `Nft::NextNftId` (r:1 w:1)
	/// Proof: `Nft::NextNftId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::PendingNft` (r:0 w:1)
	/// Proof: `Nft::PendingNft` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn request_mint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `329`
		//  Estimated: `3514`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(17_000_000, 3514)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Nft::Nfts` (r:1 w:1)
	/// Proof: `Nft::Nfts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::Owners` (r:1 w:1)
	/// Proof: `Nft::Owners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn burned() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `205`
		//  Estimated: `3670`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_000_000, 3670)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Roles::AccountRoles` (r:1 w:0)
	/// Proof: `Roles::AccountRoles` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Nfts` (r:1 w:0)
	/// Proof: `Nft::Nfts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::Owners` (r:1 w:1)
	/// Proof: `Nft::Owners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `458`
		//  Estimated: `3923`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(24_000_000, 3923)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Roles::AccountRoles` (r:1 w:0)
	/// Proof: `Roles::AccountRoles` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `Nft::PendingNft` (r:1 w:1)
	/// Proof: `Nft::PendingNft` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::Owners` (r:0 w:1)
	/// Proof: `Nft::Owners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::Nfts` (r:0 w:1)
	/// Proof: `Nft::Nfts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn approve_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `418`
		//  Estimated: `3883`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(21_000_000, 3883)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Nft::Owners` (r:0 w:1)
	/// Proof: `Nft::Owners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::Nfts` (r:0 w:1)
	/// Proof: `Nft::Nfts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn force_burn() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(8_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Roles::AccountRoles` (r:2 w:0)
	/// Proof: `Roles::AccountRoles` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `Nft::Nfts` (r:1 w:1)
	/// Proof: `Nft::Nfts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::Owners` (r:1 w:0)
	/// Proof: `Nft::Owners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Bank::TreasuryAccount` (r:1 w:0)
	/// Proof: `Bank::TreasuryAccount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::NextPodId` (r:1 w:1)
	/// Proof: `Nft::NextPodId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::UnlockNft` (r:1 w:1)
	/// Proof: `Nft::UnlockNft` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Bank::Accounts` (r:2 w:2)
	/// Proof: `Bank::Accounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::PendingPodNfts` (r:0 w:1)
	/// Proof: `Nft::PendingPodNfts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_pod() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1006`
		//  Estimated: `6946`
		// Minimum execution time: 50_000_000 picoseconds.
		Weight::from_parts(51_000_000, 6946)
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `Roles::AccountRoles` (r:2 w:0)
	/// Proof: `Roles::AccountRoles` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `Nft::PendingPodNfts` (r:1 w:1)
	/// Proof: `Nft::PendingPodNfts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::Owners` (r:1 w:1)
	/// Proof: `Nft::Owners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::Nfts` (r:1 w:0)
	/// Proof: `Nft::Nfts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Bank::Accounts` (r:2 w:2)
	/// Proof: `Bank::Accounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn receive_pod() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1103`
		//  Estimated: `7043`
		// Minimum execution time: 49_000_000 picoseconds.
		Weight::from_parts(51_000_000, 7043)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Roles::AccountRoles` (r:1 w:0)
	/// Proof: `Roles::AccountRoles` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `Nft::PendingPodNfts` (r:1 w:1)
	/// Proof: `Nft::PendingPodNfts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::Nfts` (r:1 w:1)
	/// Proof: `Nft::Nfts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Nft::Owners` (r:1 w:0)
	/// Proof: `Nft::Owners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_pod() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `709`
		//  Estimated: `4174`
		// Minimum execution time: 29_000_000 picoseconds.
		Weight::from_parts(30_000_000, 4174)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
